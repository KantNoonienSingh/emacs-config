* Environment
** Aliases
   #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Packages
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)

     (use-package diminish
       :ensure t)

     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :init
       (setq-default custom-safe-themes(quote("bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" default)))
       :config
       (load-theme 'sanityinc-tomorrow-blue t))

     (use-package evil
       :ensure t
       :config
       (evil-mode t))

     (use-package ivy
       :ensure t
       :config
       (ivy-mode t))

     (use-package ido-vertical-mode
       :ensure t
       :config
       (ido-vertical-mode t))

     (use-package imenu
       :ensure t
       :bind
       ("C-c m" . imenu))

     (use-package sudo-edit
       :ensure t
       :bind 
       ("C-c e" . sudo-edit))

     (use-package magit
       :ensure t
       :custom
       (magit-auto-revert-mode nil)
       :bind
       ("M-g s" . magit-status))

     (use-package git-gutter+
       :custom
       (git-gutter:modified-sign "~")
       (git-gutter:added-sign    "+")
       (git-gutter:deleted-sign  "-")
       :custom-face
       (git-gutter:modified ((t (:foreground "#f1fa8c" :background "#f1fa8c"))))
       (git-gutter:added    ((t (:foreground "#50fa7b" :background "#50fa7b"))))
       (git-gutter:deleted  ((t (:foreground "#ff79c6" :background "#ff79c6"))))
       :config
       (global-git-gutter+-mode 1))

     (defun undo-tree-visualizer-update-linum (&rest args)
       (linum-update undo-tree-visualizer-parent-buffer))

     (use-package popwin
       :ensure t
       :config
       (advice-add 'undo-tree-visualize-undo :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-redo :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-undo-to-x :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-redo-to-x :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualizer-mouse-set :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualizer-set :after #'undo-tree-visualizer-update-linum)
       (popwin-mode 1))

     (use-package projectile
       :ensure t
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :bind
       ("M-o p" . counsel-projectile-switch-project)
       :init
       (setq-default projectile-completion-system 'ivy)
       :config
       (projectile-mode))

     (defun neotree-project-dir ()
       "Open NeoTree using the git root."
       (interactive)
       (let ((project-dir (projectile-project-root))
             (file-name (buffer-file-name)))
         (neotree-toggle)
         (if project-dir
             (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
           (message "Could not find git project root."))))

     (use-package neotree
       :ensure t
       :init
       ;; Keybinding
       (global-set-key [f8] 'neotree-project-dir)
       ;; More keybindings
       (add-hook 'neotree-mode-hook
                 (lambda ()
                   (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                   (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                   (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                   (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                   (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                   (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                   (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                   (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                   (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle))))

     (use-package golden-ratio
       :ensure t
       :config
       (golden-ratio-mode t))

     (defun switch-to-window-and-adjust-size()
       "Switch window using shortcuts and correctly resize window frames"
       (interactive)
       (switch-window)
       (golden-ratio))

     (use-package switch-window
       :ensure t
       :bind
       ("C-x p" . switch-to-window-and-adjust-size))
   #+END_SRC

   #+RESULTS:
** Server
   #+BEGIN_SRC emacs-lisp
     ;; Run emacs as a server
     (server-start)
   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c h") 'eshell-command)
   #+END_SRC
** Options-directories
   #+BEGIN_SRC emacs-lisp
     ;; sets backup directory
     (setq-default backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC
** Options-gui
   #+BEGIN_SRC emacs-lisp
     ;; Disable tool bar
     (tool-bar-mode -1)
     (setq-default tool-bar-mode nil)
     ;; Disable scroll bars
     (scroll-bar-mode -1)
     (setq-default scroll-conservatively 100)
     ;; set font
     (set-frame-font "Inconsolata 10")
   #+END_SRC
* Editor
** Packages
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       (("C-c g" . avy-goto-char)
        ("C-c C-g" . avy-goto-char-2)))

     (use-package browse-kill-ring
       :ensure t
       :init
       (browse-kill-ring-default-keybindings))

     (use-package projectile
       :ensure t
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (setq-default projectile-completion-system 'ivy)
       :config
       (projectile-mode))

     (use-package counsel
       :ensure t
       :defines
       (projectile-completion-system magit-completing-read-function) 
       :config
       (counsel-mode t))

     (use-package counsel-projectile
       :ensure t)

     (use-package swiper
       :ensure t
       :init
       (setq-default swiper-include-line-number-in-search t)
       :bind 
       ("M-s" . swiper))

     (use-package undo-tree
       :ensure t
       :bind 
       ("C-?" . undo-tree-redo)
       :config
       (global-undo-tree-mode t))

     (use-package rainbow-mode
       :ensure t
       :diminish
       :hook (emacs-lisp-mode . rainbow-mode))
   #+END_SRC
** Options
   #+BEGIN_SRC emacs-lisp
     ;; [options] set cursor
     (setq-default cursor-type (quote (bar . 1)))

     ;; [options] ansi-color translates escape sequences into faces 
     (setq-default ansi-color-faces-vector
           [default bold shadow italic underline bold bold-italic bold])
     (setq-default ansi-color-names-vector
           (vector "#003f8e" "#ff9da4" "#d1f1a9" "#ffeead" "#bbdaff" "#ebbbff" "#99ffff" "#ffffff"))

     ;; [options] fill-column indicator
     (setq-default fci-rule-color "#003f8e")
     (setq-default fci-rule-width 1)
     (setq-default fci-rule-column 80)

     ;; [options] auto-save
     (setq-default auto-save-default nil)

     ;; [options] position
     (setq-default column-number-mode t)

     ;; [options] indentation
     (setq-default tab-always-indent t)
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)

     ;; [options] whitespace
     (global-whitespace-mode t)
     (setq-default whitespace-style (quote (trailing lines lines-tail empty big-indent space-mark tab-mark)))
     (setq-default tab-width 4)

     ;; [options] vc-mode
     (setq-default vc-annotate-color-map
           (quote
            ((20 . "#ff9da4")
             (40 . "#ffc58f")
             (60 . "#ffeead")
             (80 . "#d1f1a9")
             (100 . "#99ffff")
             (120 . "#bbdaff")
             (140 . "#ebbbff")
             (160 . "#ff9da4")
             (180 . "#ffc58f")
             (200 . "#ffeead")
             (220 . "#d1f1a9")
             (240 . "#99ffff")
             (260 . "#bbdaff")
             (280 . "#ebbbff")
             (300 . "#ff9da4")
             (320 . "#ffc58f")
             (340 . "#ffeead")
             (360 . "#d1f1a9"))))
     (setq-default vc-annotate-very-old-color nil)
   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c v") 'eval-buffer)

  (global-set-key (kbd "C-;") 'delete-backward-char)

  (global-set-key (kbd "C-c s") 'replace-string)
  
  (global-set-key (kbd "C-c C-c") 'comment-region)
  (global-set-key (kbd "C-c C-u") 'uncomment-region)

  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq-default arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
   #+END_SRC
* Org
** Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :init
       (add-hook 'org-mode-hook (lambda() (org-bullets-mode))))
     (setq org-src-tab-acts-natively t)
   #+END_SRC
* Programming
** ASM-mode
   #+BEGIN_SRC emacs-lisp
  (defun asm-programming-hooks ()
    "Setup hooks for assembly mode"
    (use-package nasm-mode
      :ensure t
      :config
      (nasm-mode t)))

  (add-hook 'asm-mode-hook 'asm-programming-hooks)
   #+END_SRC
** CC-mode
   #+BEGIN_SRC emacs-lisp
     ;;;;
     (defun cc-programming-ide ()
       "Setup ide functionality for c/c++"

     ;;; ide stuff
       (use-package flycheck
         :ensure t
         :init
         (setq-default flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
         :config
         (global-flycheck-mode))

       (use-package irony
         :ensure t
         :config
         (irony-mode))

       (use-package company
         :ensure t
         :init
         (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
         :config
         (company-mode))

       (use-package rtags
         :ensure t
         :init
         (setq-default rtags-display-result-backend 'ivy)
         (setq-default rtags-autostart-diagnostics t)
         (setq-default rtags-completions-enabled t)
         ;; keybindings
         (rtags-enable-standard-keybindings c-mode-base-map "\C-xr")
         :config
         ;; start rdm server automagically
         (add-hook 'find-file-hook 'rtags-start-process-maybe)
         (rtags-diagnostics))

       (use-package ivy-rtags
         :ensure t)

       ;; rtags + flycheck integration
       (use-package flycheck-rtags
         :ensure t
         :init
         (setq-default flycheck-checker 'rtags)
         (setq-default flycheck-check-syntax-automatically nil)
         (setq-default flycheck-highlighting-mode nil))

       (use-package cmake-ide
         :ensure t
         :init
         (setq-default cmake-ide-build-dir "debug")
         (setq-default cmake-ide-cmake-command "dcmake")
         ;; compile shortcut
         (define-key c-mode-base-map (kbd "C-c C-v") (function cmake-ide-compile))
         :config
         (cmake-ide-setup)))

     (defun cc-programming-hooks ()
       "C/C++ mode setup"

       (require 'cc-mode)

       ;;; style settings
       (c-set-style "stroustrup")
       (c-set-offset (quote brace-list-open) 0)
       (c-set-offset (quote brace-list-entry) 0 nil)
       (c-set-offset (quote case-label) 4 nil)

       ;;; enable code folding

       (hs-minor-mode)
       (define-key c-mode-base-map (kbd "C-c C-f") (function hs-hide-block))
       (define-key c-mode-base-map (kbd "C-c C-r") (function hs-show-block))

       ;;; initialize ide tools
       (cc-programming-ide))

       ;;;; bind to c/c++ mode

     (add-hook 'c-mode-hook 'cc-programming-hooks)
     (add-hook 'c++-mode-hook 'cc-programming-hooks)

     (defun cc-create-dir-locals ()
       "Creates a dir-locals.el file with default settings"
       (interactive)
       (add-dir-local-variable 'c-mode 'cmake-ide-build-dir (concat default-directory "debug"))
       (add-dir-local-variable 'c++-mode 'cmake-ide-build-dir (concat default-directory "debug"))
       (add-dir-local-variable 'c-mode 'cmake-ide-project-dir default-directory)
       (add-dir-local-variable 'c++-mode 'cmake-ide-project-dir default-directory))
   #+END_SRC

   #+RESULTS:
   : cc-create-dir-locals

** HTML-mode
   #+BEGIN_SRC emacs-lisp
  (setq-default web-mode-block-padding 4)
  (setq-default web-mode-script-padding 4)
  (setq-default web-mode-style-padding 4)
   #+END_SRC
** JS-mode
   #+BEGIN_SRC emacs-lisp
     (defun javascript-programming-hooks ()
       (use-package js2-mode
         :ensure t
         :init
         (add-hook 'js-mode-hook 'js2-minor-mode))

       (use-package json-mode
         :ensure t))

     (add-hook 'js-mode-hook 'javascript-programming-hooks)
   #+END_SRC
* Version-control
  #+BEGIN_SRC emacs-lisp
  (setq-local vc-annotate-background nil)
  (setq-local vc-annotate-color-map
              (quote
               ((20  . "#c82829")
                (40  . "#f5871f")
                (60  . "#eab700")
                (80  . "#718c00")
                (100 . "#3e999f")
                (120 . "#4271ae")
                (140 . "#8959a8")
                (160 . "#c82829")
                (180 . "#f5871f")
                (200 . "#eab700")
                (220 . "#718c00")
                (240 . "#3e999f")
                (260 . "#4271ae")
                (280 . "#8959a8")
                (300 . "#c82829")
                (320 . "#f5871f")
                (340 . "#eab700")
                (360 . "#718c00"))
               )
  )
  (setq-local vc-annotate-very-old-color nil)
  #+END_SRC
  #+END_SRC
